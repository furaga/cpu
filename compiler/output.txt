Print KNormal_t(kNormal.ml):
  let rec f : Int -> Unit ( n ) =
    if 0 <= n then
      let Tu1 : Unit =
        print_int n 
      in
      let a : Array(Int -> Unit) =
        let Ti3 : Int =
          1
        in
        create_array Ti3 f 
      in
      let Tf5 : Int -> Unit =
        let Ti4 : Int =
          0
        in
        a.(Ti4)      in
      let Ti7 : Int =
        let Ti6 : Int =
          1
        in
        n - Ti6
      in
      Tf5 Ti7 
    else
      ()
  in
  let Ti2 : Int =
    9
  in
  f Ti2 

Print KNormal_t (Alpha.ml)
  let rec f.8 : Int -> Unit ( n.9 ) =
    if 0 <= n.9 then
      let Tu1.11 : Unit =
        print_int n.9 
      in
      let a.12 : Array(Int -> Unit) =
        let Ti3.17 : Int =
          1
        in
        create_array Ti3.17 f.8 
      in
      let Tf5.13 : Int -> Unit =
        let Ti4.16 : Int =
          0
        in
        a.12.(Ti4.16)      in
      let Ti7.14 : Int =
        let Ti6.15 : Int =
          1
        in
        n.9 - Ti6.15
      in
      Tf5.13 Ti7.14 
    else
      ()
  in
  let Ti2.10 : Int =
    9
  in
  f.8 Ti2.10 

Print KNormal_t(Cse.ml):
  let rec f.8 : Int -> Unit ( n.9 ) =
    if 0 <= n.9 then
      let Tu1.11 : Unit =
        print_int n.9 
      in
      let Ti3.17 : Int =
        1
      in
      let a.12 : Array(Int -> Unit) =
        create_array Ti3.17 f.8 
      in
      let Ti4.16 : Int =
        0
      in
      let Tf5.13 : Int -> Unit =
        a.12.(Ti4.16)      in
      let Ti6.15 : Int =
        Ti3.17
      in
      let Ti7.14 : Int =
        n.9 - Ti6.15
      in
      Tf5.13 Ti7.14 
    else
      ()
  in
  let Ti2.10 : Int =
    9
  in
  f.8 Ti2.10 

Print KNormal_T (constArg.ml)
  let rec f.8 : Unit ( ) =
    let n.9 : Int =
      9
    in
    if 0 <= n.9 then
      let Tu1.11 : Unit =
        print_int n.9 
      in
      let Ti3.17 : Int =
        1
      in
      let a.12 : Array(Int -> Unit) =
        create_array Ti3.17 f.8 
      in
      let Ti4.16 : Int =
        0
      in
      let Tf5.13 : Int -> Unit =
        a.12.(Ti4.16)      in
      let Ti6.15 : Int =
        1
      in
      let Ti7.14 : Int =
        n.9 - Ti6.15
      in
      Tf5.13 Ti7.14 
    else
      ()
  in
  let Ti2.10 : Int =
    9
  in
  f.8 

Print KNormal_t(Cse.ml):
  let rec f.8 : Unit ( ) =
    let n.9 : Int =
      9
    in
    if 0 <= n.9 then
      let Tu1.11 : Unit =
        print_int n.9 
      in
      let Ti3.17 : Int =
        1
      in
      let a.12 : Array(Int -> Unit) =
        create_array Ti3.17 f.8 
      in
      let Ti4.16 : Int =
        0
      in
      let Tf5.13 : Int -> Unit =
        a.12.(Ti4.16)      in
      let Ti6.15 : Int =
        Ti3.17
      in
      let Ti7.14 : Int =
        n.9 - Ti6.15
      in
      Tf5.13 Ti7.14 
    else
      ()
  in
  f.8 

Print KNormal_T (constArg.ml)
  let rec f.8 : Unit ( ) =
    let n.9 : Int =
      9
    in
    let Tu1.11 : Unit =
      print_int n.9 
    in
    let Ti3.17 : Int =
      1
    in
    let a.12 : Array(Int -> Unit) =
      create_array Ti3.17 f.8 
    in
    let Ti4.16 : Int =
      0
    in
    let Tf5.13 : Int -> Unit =
      a.12.(Ti4.16)    in
    let Ti6.15 : Int =
      1
    in
    let Ti7.14 : Int =
      8
    in
    Tf5.13 Ti7.14 
  in
  f.8 

Print KNormal_t(Cse.ml):
  let rec f.8 : Unit ( ) =
    let n.9 : Int =
      9
    in
    let Tu1.11 : Unit =
      print_int n.9 
    in
    let Ti3.17 : Int =
      1
    in
    let a.12 : Array(Int -> Unit) =
      create_array Ti3.17 f.8 
    in
    let Ti4.16 : Int =
      0
    in
    let Tf5.13 : Int -> Unit =
      a.12.(Ti4.16)    in
    let Ti7.14 : Int =
      8
    in
    Tf5.13 Ti7.14 
  in
  f.8 

Print KNormal_T (constArg.ml)
  let rec f.8 : Unit ( ) =
    let n.9 : Int =
      9
    in
    let Tu1.11 : Unit =
      print_int n.9 
    in
    let Ti3.17 : Int =
      1
    in
    let a.12 : Array(Int -> Unit) =
      create_array Ti3.17 f.8 
    in
    let Ti4.16 : Int =
      0
    in
    let Tf5.13 : Int -> Unit =
      a.12.(Ti4.16)    in
    let Ti7.14 : Int =
      8
    in
    Tf5.13 Ti7.14 
  in
  f.8 

Print KNormal_t(Closure.ml):
  let rec f.8 : Unit ( ) =
    let n.9 : Int =
      9
    in
    let Tu1.11 : Unit =
      print_int n.9 
    in
    let Ti3.17 : Int =
      1
    in
    let a.12 : Array(Int -> Unit) =
      create_array Ti3.17 f.8 
    in
    let Ti4.16 : Int =
      0
    in
    let Tf5.13 : Int -> Unit =
      a.12.(Ti4.16)    in
    let Ti7.14 : Int =
      8
    in
    Tf5.13 Ti7.14 
  in
  f.8 

Print Asm_t(Virtual.ml):
  Unit f.8 () =
    Let n.9 =
      Set (9)
    In
    Let Tu1.11 =
      CallDir min_caml_print_int n.9 
    In
    Let Ti3.17 =
      Set (1)
    In
    Let a.12 =
      CallDir min_caml_create_array Ti3.17 f.8 
    In
    Let Ti4.16 =
      Set (0)
    In
    Let o.18 =
      Ti4.16 << 2
    In
    Let Tf5.13 =
      Lord a.12[o.18]
    In
    Let Ti7.14 =
      Set (8)
    In
    Ans (
      CallCls Tf5.13 Ti7.14 
    )
  Let f.8 =
    Mov (%g2)
  In
  Let %g2 =
    %g2 + 8
  In
  Let l.20 =
    Set (f.8)
  In
  Let Tu21 =
    Store l.20 to f.8[0]
  In
  Ans (
    CallCls f.8 
  )

	len = 0
