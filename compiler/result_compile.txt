Print Syntax_t(kNormal.ml):
  Let x : Int =
    SLL(
      Int(5)
      Int(-1)
    )
  In
  Let y : Int =
    SLL(
      Int(8)
      Int(-2)
    )
  In
  Let z : Int =
    Div(
      Int(9)
      Int(5)
    )
  In
  Add(
    Add(
      Var(x)
      Var(y)
    )
    Var(z)
  )

Print KNormal_t(kNormal.ml):
  Let x : Int =
    Let Ti1 : Int =
      Int(5)
    In
    Let Ti2 : Int =
      Int(-1)
    In
    Ti1 << Ti2
  In
  Let y : Int =
    Let Ti3 : Int =
      Int(8)
    In
    Let Ti4 : Int =
      Int(-2)
    In
    Ti3 << Ti4
  In
  Let z : Int =
    Let Ti5 : Int =
      Int(9)
    In
    Let Ti6 : Int =
      Int(5)
    In
    Ti5 / Ti6
  In
  Let Ti7 : Int =
    x + y
  In
  Ti7 + z

Print KNormal_t (Alpha.ml)
  Let x.8 : Int =
    Let Ti1.16 : Int =
      Int(5)
    In
    Let Ti2.17 : Int =
      Int(-1)
    In
    Ti1.16 << Ti2.17
  In
  Let y.9 : Int =
    Let Ti3.14 : Int =
      Int(8)
    In
    Let Ti4.15 : Int =
      Int(-2)
    In
    Ti3.14 << Ti4.15
  In
  Let z.10 : Int =
    Let Ti5.12 : Int =
      Int(9)
    In
    Let Ti6.13 : Int =
      Int(5)
    In
    Ti5.12 / Ti6.13
  In
  Let Ti7.11 : Int =
    x.8 + y.9
  In
  Ti7.11 + z.10

Print KNormal_t(Cse.ml):
  Let Ti1.16 : Int =
    Int(5)
  In
  Let Ti2.17 : Int =
    Int(-1)
  In
  Let x.8 : Int =
    Int(0)
  In
  Let Ti3.14 : Int =
    Int(8)
  In
  Let Ti4.15 : Int =
    Int(-2)
  In
  Let y.9 : Int =
    Var(x.8)
  In
  Let Ti5.12 : Int =
    Int(9)
  In
  Let Ti6.13 : Int =
    Var(Ti1.16)
  In
  Let z.10 : Int =
    Int(1)
  In
  Let Ti7.11 : Int =
    Var(y.9)
  In
  Var(z.10)

Print KNormal_t (Movelet.ml)
  Let z.10 : Int =
    Int(1)
  In
  Var(z.10)

Print KNormal_t(Cse.ml):
  Let z.10 : Int =
    Int(1)
  In
  Var(z.10)

Print KNormal_t (Movelet.ml)
  Let z.10 : Int =
    Int(1)
  In
  Var(z.10)

Print Closure_t(Closure.ml):
  Let z.10 : Int =
    Int (1)
  In
  Var (z.10)

Print Asm_t(Virtual.ml):
  Let z.10 =
    Set (1)
  In
  Ans (
    Mov (z.10)
  )

