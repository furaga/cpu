## -*- coding: utf-8 -*-
<%inherit file="skeleton.tmp"/>
entity io_dev is
<%include file="io_dev_entity.tmp"/>
end io_dev;

architecture RTL of io_dev is
	component u232c is
<%include file="u232c_entity.tmp"/>
	end component;
	subtype buf_rec_t is std_logic_vector(7 downto 0);

	-- (4 * 4096) = 16384 bytes
	type sendbuf_t is array (0 to 4095) of buf_rec_t;
	signal sendbuf0 : sendbuf_t;
	signal sendbuf1 : sendbuf_t;
	signal sendbuf2 : sendbuf_t;
	signal sendbuf3 : sendbuf_t;
	signal send_head	: std_logic_vector(13 downto 0) := (others=>'0');
	signal send_tail	: std_logic_vector(13 downto 0) := (others=>'0');
	signal sheadi	: integer range 0 to 4095;
	signal stail0	: std_logic_vector(11 downto 0) := (others=>'0');
	signal stail1	: std_logic_vector(11 downto 0) := (others=>'0');
	signal stail2	: std_logic_vector(11 downto 0) := (others=>'0');
	signal stail3	: std_logic_vector(11 downto 0) := (others=>'0');
	signal stail0_int	: integer range 0 to 4095;
	signal stail1_int	: integer range 0 to 4095;
	signal stail2_int	: integer range 0 to 4095;
	signal stail3_int	: integer range 0 to 4095;
	signal send_empty : std_logic := '0';

	-- (4 * 512) = 2048 bytes
	type recvbuf_t is array (0 to 511) of buf_rec_t;
	signal recv_head	: std_logic_vector(10 downto 0) := (others=>'0');
	signal recv_tail	: std_logic_vector(10 downto 0) := ${oc.io_rtail()};
	signal rtaili	: integer range 0 to 511;
	signal rhead0	: std_logic_vector(8 downto 0) := (others=>'0');
	signal rhead1	: std_logic_vector(8 downto 0) := (others=>'0');
	signal rhead2	: std_logic_vector(8 downto 0) := (others=>'0');
	signal rhead3	: std_logic_vector(8 downto 0) := (others=>'0');
	signal rhead0_int	: integer range 0 to 511;
	signal rhead1_int	: integer range 0 to 511;
	signal rhead2_int	: integer range 0 to 511;
	signal rhead3_int	: integer range 0 to 511;

	signal recvbuf0 : recvbuf_t;
	signal recvbuf1 : recvbuf_t;
	signal recvbuf2 : recvbuf_t;
	signal recvbuf3 : recvbuf_t;
	--signal recvbuf : recvbuf_t := (
##<%include file="contest_sld.txt"/>
	--);

	signal u232c_o : std_logic_vector(7 downto 0);
	signal u232c_i : std_logic_vector(7 downto 0);

	signal send_go : std_logic := '0';
	signal send_busy : std_logic := '0';
	signal recv_ready : std_logic;

	signal nyetb : std_logic;
	signal nyetw : std_logic;
	
begin
	
	rs232c: u232c generic map (wtime=>${next.wtime()})
	port map (clk, u232c_o, send_go, send_busy, RS_TX, 
				   u232c_i, recv_ready, RS_RX);

------------------------------------------------------------------------
---- send
------------------------------------------------------------------------
	sheadi <= conv_integer(send_head(13 downto 2));
	stail0_int <= conv_integer(stail0);
	stail1_int <= conv_integer(stail1);
	stail2_int <= conv_integer(stail2);
	stail3_int <= conv_integer(stail3);

	send_empty <= '1' when send_head=send_tail else '0';
	send: process(CLK)
	begin
		if rising_edge(CLK) then
			if CPU_WR="10" then
				send_tail <= send_tail + 1;
				case send_tail(1 downto 0) is
					when "00" =>
						sendbuf0(stail0_int) <= CPU_OUT(7 downto 0);
						stail0 <= stail0+1;
					when "01" =>
						sendbuf1(stail1_int) <= CPU_OUT(7 downto 0);
						stail1 <= stail1+1;
					when "10" =>
						sendbuf2(stail2_int) <= CPU_OUT(7 downto 0);
						stail2 <= stail2+1;
					when "11" =>
						sendbuf3(stail3_int) <= CPU_OUT(7 downto 0);
						stail3 <= stail3+1;
					when others =>
				end case;
			elsif CPU_WR="11" then
				send_tail <= send_tail + 4;
				stail0 <= stail0+1;
				stail1 <= stail1+1;
				stail2 <= stail2+1;
				stail3 <= stail3+1;
				case send_tail(1 downto 0) is
					when "00" =>
						sendbuf0(stail0_int) <= CPU_OUT(7 downto 0);
						sendbuf1(stail1_int) <= CPU_OUT(15 downto 8);
						sendbuf2(stail2_int) <= CPU_OUT(23 downto 16);
						sendbuf3(stail3_int) <= CPU_OUT(31 downto 24);
					when "01" =>
						sendbuf1(stail1_int) <= CPU_OUT(7 downto 0);
						sendbuf2(stail2_int) <= CPU_OUT(15 downto 8);
						sendbuf3(stail3_int) <= CPU_OUT(23 downto 16);
						sendbuf0(stail0_int) <= CPU_OUT(31 downto 24);
					when "10" =>
						sendbuf2(stail2_int) <= CPU_OUT(7 downto 0);
						sendbuf3(stail3_int) <= CPU_OUT(15 downto 8);
						sendbuf0(stail0_int) <= CPU_OUT(23 downto 16);
						sendbuf1(stail1_int) <= CPU_OUT(31 downto 24);
					when "11" =>
						sendbuf3(stail3_int) <= CPU_OUT(7 downto 0);
						sendbuf0(stail0_int) <= CPU_OUT(15 downto 8);
						sendbuf1(stail1_int) <= CPU_OUT(23 downto 16);
						sendbuf2(stail2_int) <= CPU_OUT(31 downto 24);
					when others =>
				end case;
			end if;

			if send_busy='0' and send_go='0' then
				case send_head(1 downto 0) is
					when "00" =>
						u232c_o <= sendbuf0(sheadi);
					when "01" =>
						u232c_o <= sendbuf1(sheadi);
					when "10" =>
						u232c_o <= sendbuf2(sheadi);
					when "11" =>
						u232c_o <= sendbuf3(sheadi);
					when others =>
				end case;
				send_go <= not send_empty;
				send_head <= send_head + conv_integer(not send_empty);
			else
				send_go<='0';
			end if;
		end if;
	end process;

------------------------------------------------------------------------
---- recv
------------------------------------------------------------------------
	rtaili <= conv_integer(recv_tail(10 downto 2));

	NYET(1)	<= nyetw;
	NYET(0)	<= nyetb;
	nyetw	<= '1' when 
					  recv_head   =recv_tail or
					 (recv_head+1)=recv_tail or
					 (recv_head+2)=recv_tail or
					 (recv_head+3)=recv_tail
				   else '0';
	nyetb	<= '1' when recv_head=recv_tail else '0';
	receive : process(CLK)
	begin
		if rising_edge(CLK) then
			if CPU_RD="10" then
				recv_head <= recv_head+1;
				case recv_head(1 downto 0) is
					when "00" =>
						CPU_IN <= x"000000"&recvbuf0(rhead0_int);
						rhead0 <= rhead0+1;
					when "01" =>
						CPU_IN <= x"000000"&recvbuf1(rhead1_int);
						rhead1 <= rhead1+1;
					when "10" =>
						CPU_IN <= x"000000"&recvbuf2(rhead2_int);
						rhead2 <= rhead2+1;
					when "11" =>
						CPU_IN <= x"000000"&recvbuf3(rhead3_int);
						rhead3 <= rhead3+1;
					when others =>
				end case;
			elsif CPU_RD="11" then
				recv_head <= recv_head+4;
				rhead0 <= rhead0+1;
				rhead1 <= rhead1+1;
				rhead2 <= rhead2+1;
				rhead3 <= rhead3+1;
				case recv_head(1 downto 0) is
					when "00" =>
						CPU_IN <= recvbuf3(rhead3_int) &
								  recvbuf2(rhead2_int) &
								  recvbuf1(rhead1_int) &
								  recvbuf0(rhead0_int);
					when "01" =>
						CPU_IN <= recvbuf0(rhead0_int) &
								  recvbuf3(rhead3_int) &
								  recvbuf2(rhead2_int) &
								  recvbuf1(rhead1_int);
					when "10" =>
						CPU_IN <= recvbuf1(rhead1_int) &
								  recvbuf0(rhead0_int) &
								  recvbuf3(rhead3_int) &
								  recvbuf2(rhead2_int);
					when "11" =>
						CPU_IN <= recvbuf2(rhead2_int) &
								  recvbuf1(rhead1_int) &
								  recvbuf0(rhead0_int) &
								  recvbuf3(rhead3_int);
					when others =>
				end case;
			end if;

			if recv_ready='1' then
				recv_tail <= recv_tail+1;
				case recv_tail(1 downto 0) is
					when "00" =>
						recvbuf0(rtaili)<=u232c_i;
					when "01" =>
						recvbuf1(rtaili)<=u232c_i;
					when "10" =>
						recvbuf2(rtaili)<=u232c_i;
					when "11" =>
						recvbuf3(rtaili)<=u232c_i;
					when others =>
				end case;
			end if;
		end if;
	end process;


end RTL;
<%namespace name="oc" file="macro.tmp"/>
