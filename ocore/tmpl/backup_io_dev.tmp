## -*- coding: utf-8 -*-
<%inherit file="skeleton.tmp"/>
entity io_dev is
<%include file="io_dev_entity.tmp"/>
end io_dev;

architecture RTL of io_dev is
	component u232c is
<%include file="u232c_entity.tmp"/>
	end component;

	subtype buf_rec_t is std_logic_vector(7 downto 0);

	type sendbuf_t is array (0 to 65535) of buf_rec_t;
	signal sendbuf : sendbuf_t;
	signal send_head	: std_logic_vector(15 downto 0) := (others=>'0');
	signal send_tail	: std_logic_vector(15 downto 0) := (others=>'0');

	signal send_empty : std_logic := '1';

	signal recv_head	: std_logic_vector(10 downto 0) := (others=>'0');
	signal recv_tail	: std_logic_vector(10 downto 0) := ${oc.io_rtail()};
	type recvbuf_t is array (0 to 2047) of buf_rec_t;
	--signal recvbuf : recvbuf_t;
	signal recvbuf : recvbuf_t := (
<%include file="contest_sld.txt"/>
	);
	signal u232c_o : std_logic_vector(7 downto 0);
	signal u232c_i : std_logic_vector(7 downto 0);

	signal send_go : std_logic;
	signal send_busy : std_logic := '0';

	signal recv_ready : std_logic;

	
begin
	
	rs232c: u232c generic map (wtime=>${next.wtime()})
	port map (clk, u232c_o, send_go, send_busy, RS_TX, 
				   u232c_i, recv_ready, RS_RX);

------------------------------------------------------------------------
---- send (write first)
------------------------------------------------------------------------
-- ma : increment send_tail
-- wb : change send_empty
-- ft : send_go
-- async : send_head
	send: process(CLK)
	begin
		if rising_edge(CLK) then
			if send_head=send_tail then
				send_empty<='1';
			else 
				send_empty<='0';
			end if;
			
			if CPU_WR='1' then
				sendbuf(conv_integer(send_tail)) <= CPU_OUT(7 downto 0);
				send_tail <= send_tail+1;
			end if;

			if send_busy='0' and send_go='0' then
				u232c_o <= sendbuf(conv_integer(send_head));
				send_go<= not send_empty;
				send_head <= send_head + conv_integer(not send_empty);
			else
				send_go<='0';
			end if;
		end if;
	end process;

------------------------------------------------------------------------
---- recv
------------------------------------------------------------------------
-- ma : increment recv_head
-- wb : change NYET, IO_IN(mem_acc)
-- async : recv_tail --> NYET
	receive : process(CLK)
	begin
		if rising_edge(CLK) then
			if recv_head=recv_tail then
				NYET<='1';
			else 
				NYET<='0';
			end if;

			if CPU_RD='1' then
				CPU_IN <= x"000000"&recvbuf(conv_integer(recv_head));
				recv_head <= recv_head+1;
			end if;
			if recv_ready='1' then
				recvbuf(conv_integer(recv_tail))<=u232c_i;
				recv_tail <= recv_tail+1;
			end if;
		end if;
	end process;


end RTL;
<%namespace name="oc" file="macro.tmp"/>
