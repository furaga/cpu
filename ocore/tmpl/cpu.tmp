## -*- coding: utf-8 -*-
<%inherit file="skeleton.tmp"/>
entity cpu is
<%include file="cpu_entity.tmp"/>
end cpu;

architecture RTL of cpu is

component clk_gen			
<%include file="clk_gen_entity.tmp"/>
end component;			

component fetch			
<%include file="fetch_entity.tmp"/>
end component;			

component decode			
<%include file="decode_entity.tmp"/>
end component;			

component reg_dc			
<%include file="reg_dc_entity.tmp"/>
end component;			


component exec
<%include file="exec_entity.tmp"/>
end component;


component reg_wb			
<%include file="reg_wb_entity.tmp"/>
end component;

component ram is
<%include file="ram_entity.tmp"/>
end component;

	signal	CLK_FT	:	std_logic;
	signal	CLK_DC	:	std_logic;
	signal	CLK_EX	:	std_logic;
	signal	CLK_MA	:	std_logic;
	signal	CLK_WB	:	std_logic;
	signal	P_COUNT	:	std_logic_vector (31 downto 0);
	signal	PROM_OUT	:	std_logic_vector (31 downto 0);
	signal	IR	:	std_logic_vector (31 downto 0);

	signal	N_REG	:	std_logic_vector (4 downto 0);
	signal	N_REG_S	:	std_logic_vector (4 downto 0);
	signal	N_REG_T	:	std_logic_vector (4 downto 0);
	signal	N_REG_D	:	std_logic_vector (4 downto 0);
	signal	FramePointer	: ${oc.ram_addr_t()};
	signal	REG_IN	:	std_logic_vector (31 downto 0);
	signal	REG_S	:	std_logic_vector (31 downto 0);
	signal	REG_T	:	std_logic_vector (31 downto 0);
	signal	REG_D	:	std_logic_vector (31 downto 0);
	signal	REG_COND	:	std_logic_vector (3 downto 0);
	signal	REG_00	:	std_logic_vector (31 downto 0);
	signal	REG_01	:	std_logic_vector (31 downto 0);
	signal	REG_02	:	std_logic_vector (31 downto 0);
	signal	REG_03	:	std_logic_vector (31 downto 0);
	signal	REG_04	:	std_logic_vector (31 downto 0);
	signal	REG_05	:	std_logic_vector (31 downto 0);
	signal	REG_06	:	std_logic_vector (31 downto 0);
	signal	REG_07	:	std_logic_vector (31 downto 0);
	signal	REG_08	:	std_logic_vector (31 downto 0);
	signal	REG_09	:	std_logic_vector (31 downto 0);
	signal	REG_10	:	std_logic_vector (31 downto 0);
	signal	REG_11	:	std_logic_vector (31 downto 0);
	signal	REG_12	:	std_logic_vector (31 downto 0);
	signal	REG_13	:	std_logic_vector (31 downto 0);
	signal	REG_14	:	std_logic_vector (31 downto 0);
	signal	REG_15	:	std_logic_vector (31 downto 0);
	signal	REG_16	:	std_logic_vector (31 downto 0);
	signal	REG_17	:	std_logic_vector (31 downto 0);
	signal	REG_18	:	std_logic_vector (31 downto 0);
	signal	REG_19	:	std_logic_vector (31 downto 0);
	signal	REG_20	:	std_logic_vector (31 downto 0);
	signal	REG_21	:	std_logic_vector (31 downto 0);
	signal	REG_22	:	std_logic_vector (31 downto 0);
	signal	REG_23	:	std_logic_vector (31 downto 0);
	signal	REG_24	:	std_logic_vector (31 downto 0);
	signal	REG_25	:	std_logic_vector (31 downto 0);
	signal	REG_26	:	std_logic_vector (31 downto 0);
	signal	REG_27	:	std_logic_vector (31 downto 0);
	signal	REG_28	:	std_logic_vector (31 downto 0);
	signal	REG_29	:	std_logic_vector (31 downto 0);
	signal	REG_30	:	std_logic_vector (31 downto 0);
	signal	REG_31	:	std_logic_vector (31 downto 0);

	signal	N_RAM	:	std_logic_vector (19 downto 0);
	signal	RAM_IN	:	std_logic_vector (31 downto 0);
	signal	RAM_OUT	:	std_logic_vector (31 downto 0);
	signal	RAM_WEN	:	std_logic;
	signal	RAM_0	:	std_logic_vector (31 downto 0);
	signal	RAM_1	:	std_logic_vector (31 downto 0);
	signal	RAM_2	:	std_logic_vector (31 downto 0);
	signal	RAM_3	:	std_logic_vector (31 downto 0);
	signal	RAM_4	:	std_logic_vector (31 downto 0);
	signal	RAM_5	:	std_logic_vector (31 downto 0);
	signal	RAM_6	:	std_logic_vector (31 downto 0);
	signal	RAM_7	:	std_logic_vector (31 downto 0);

	signal	LR_IN	:	${oc.pc_t()};
	signal	LR_OUT	:	${oc.pc_t()};
	signal	LinkRegister	:	${oc.pc_t()};

begin			

-- clk(state machine)
	clk_u	:	clk_gen port map(CLK, CLK_FT, CLK_DC, CLK_EX, CLK_MA, CLK_WB);

-- fetch phase
	fetch_u	:	fetch port map(CLK_FT, P_COUNT, PROM_OUT);

-- decode phase
	dec_u	:	decode port map(CLK_DC,
					PROM_OUT, REG_01, LR_OUT,
					IR, FramePointer, LinkRegister
					);

	regdec_rs	:	reg_dc port map(CLK_DC, 
		${REGS()},
		PROM_OUT(25 downto 21),
		 N_REG_S, REG_S);

	regdec_rt	:	reg_dc port map(CLK_DC, 
		${REGS()},
		PROM_OUT(20 downto 16),
		 N_REG_T, REG_T);

	regdec_rd	:	reg_dc port map(CLK_DC, 
		${REGS()},
		PROM_OUT(15 downto 11),
		 N_REG_D, REG_D);

-- exec phase
	exec_u	:	exec port map(CLK_EX, RESET, IR, P_COUNT,
		 REG_S, REG_T, REG_D, FramePointer, LinkRegister,
		 LR_IN, P_COUNT, N_REG, REG_IN, N_RAM, RAM_IN, REG_COND,
		 RAM_WEN);

-- memory access phase
	ram_u	: ram port map (CLK_MA, RAM_WEN, N_RAM, RAM_IN,
							RAM_OUT, IO65_IN, IO64_OUT);
	
-- write-back phase
	regwb_u	:	reg_wb port map(CLK_WB, RESET,
		 N_REG, REG_IN, LR_IN, RAM_OUT, REG_COND,
		 ${REGS()}, LR_OUT
	 );

end RTL;			

<%namespace name="oc" file="macro.tmp"/>
<%def name="REGS()">
		 REG_00, REG_01, REG_02, REG_03, REG_04, REG_05, REG_06, REG_07, 
		 REG_08, REG_09, REG_10, REG_11, REG_12, REG_13, REG_14, REG_15, 
		 REG_16, REG_17, REG_18, REG_19, REG_20, REG_21, REG_22, REG_23, 
		 REG_24, REG_25, REG_26, REG_27, REG_28, REG_29, REG_30, REG_31
</%def>

