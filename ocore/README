
####################################
2012年  2月  7日 火曜日 19:11:32 JST

- call, return はハードウェアでサポートする。
- fibで使われる操作は揃ったはず。
- これからfibのテスト。
- 未だにghdlシミュレータでのみのテスト。

####################################
2012年  2月  7日 火曜日 14:59:58 JST

・テンプレートができた。
	宣言は共通のものを使うことで、編集ミスをなくせるが、
	制御線をつなぐところは自動でやらなくてはいけない。
	どこまでテンプレートに任せるか考えどこ。
	とりあえずテンプレートは終了。

命令を揃える。
($ sudo apt-get install gtkwave ghdl)
$ make
$ make push
$ make wave
$ make rel (make reload)

####################################
2012年  2月  7日 火曜日 12:53:50 JST

開発環境の整備。
・テンプレートの使用。
- test環境整備。
- コンポーネントの宣言のミスをなくす。

失敗すると困るのでひとまずpush。

####################################
2012年  2月  7日 火曜日 02:39:19 JST

ステージ構成を少し変更。
こうしないと、レジスタからアドレスを指定しづらい。
基本的なパイプラインのステージ構成といわれるものを
参考にした。

-fetch phase
-decode phase
-exec phase 
-memory access phase
-write back phase

ramが大体できたはず。

次は命令を揃える。

基本的な動作はするが、まだ確認すべきことがある状態。
命令を揃えつつデバッグする。

####################################
2012年  2月  6日 月曜日 21:55:04 JST

できた。
・registerを32個に拡張。
・LinkRegister
・ゼロレジスタ
・初期化実装完了。

これから。
・rom、ramの実装の仕方。
・メガファンクションとは

まださき。
・I/O
・命令を揃える。

####################################
2012年  2月  6日 月曜日 19:35:00 JST

ghdlシミュレータでは動作。
初期化を実装する前。


####################################
2012年  2月  6日 月曜日 14:38:23 JST
下のアドレスに基づいてつくったコア。
http://laputa.cs.shinshu-u.ac.jp/~yizawa/design_cpu/index.html

ghdlシミュレータで正しく動作したとこまででpush。
実機で動くかは試していない。

($ sudo apt-get install gtkwave ghdl)
$ make
$ make wave


top.vhd : cpuにクロックとIOを入れる。
cpu15e.vhd : コアコントローラ？なぜ15？
clk_gen.vhd : 4つのclkを生成。

## fetch phase
	fetch.vhd : PROM_OUT <- ROM[PC]
## decode phase
	decode.vhd : PROM_OUT からOPCODEとOP_DATAを分離。
	reg_dc.vhd : 引数となるレジスタA, B、又、そのインデックスを返す。
	ram_dc.vhd : 与えられたアドレスのRAMの中身を返す。
## exec phase 
	exec.vhd : 命令実行。
## write-back phase
	reg_wb.vhd : 書き込み。
	ram_wb.vhd : 書き込み。



####################################
2012年  2月  5日 日曜日 17:11:27 JST

ん。
